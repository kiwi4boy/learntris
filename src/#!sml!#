Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:4.34-4.59 Error: operator is not a function [tycon mismatch]
  operator: int
  in expression:
    x_dim (fn _ => empty_row)

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:160.36 Warning: calling polyEqual

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:160.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
val double_foldli = fn
  : (int -> int -> 'a -> 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- use "xx.sml";
[opening xx.sml]
xx.sml:122.5-126.28 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int -> int -> 'Z -> 'Y -> 'Y
  operand:         int * int * string * string vector vector
                   -> string vector vector
  in expression:
    double_foldli
      (fn (r,c,element,acc) => if <exp> <> <exp> then <exp> <exp> else acc)

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:122.5-122.18 Error: unbound variable or constructor: double_foldli

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:133.5-137.28 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int -> int -> 'Z -> 'Y -> 'Y
  operand:         int * int * string * string vector vector
                   -> string vector vector
  in expression:
    double_foldli
      (fn (r,c,element,acc) => if <exp> <> <exp> then <exp> <exp> else acc)

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
xx.sml:134.6 Error: syntax error: inserting  LPAREN

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:167.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
xx.sml:104.48 Error: syntax error: inserting  END

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:144.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:144.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
xx.sml:117.22 Error: syntax error: inserting  END

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:145.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:124.35-124.45 Error: unbound variable or constructor: curr_tetra
xx.sml:124.46-124.60 Error: unbound variable or constructor: curr_tetra_loc

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:124.16-124.58 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string vector vector
  operand:         string vector vector ref
  in expression:
    place_block_in_arr cur_tetra

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:151.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
val print_mixed = fn : unit -> unit
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:151.36 Warning: calling polyEqual

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:138.45-138.55 Error: unbound variable or constructor: curr_tetra
xx.sml:143.6-143.27 Error: can't find function arguments in clause
xx.sml:144.51-144.61 Error: unbound variable or constructor: curr_tetra
xx.sml:148.15-148.29 Error: unbound variable or constructor: curr_tetra_loc
xx.sml:134.12-136.41 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         unit -> bool
  in expression:
    aux (fn () => (<exp> >= <exp>) andalso (<exp> andalso <exp>))
xx.sml:141.12-142.41 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         unit -> bool
  in expression:
    aux (fn () => <exp> <exp> = ".")
xx.sml:144.6-144.62 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string vector vector ref
  operand:         bool
  in expression:
    (double_foldli newLoc_do_not_collide_f) true

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:134.12-136.41 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         unit -> bool
  in expression:
    aux (fn () => (<exp> >= <exp>) andalso (<exp> andalso <exp>))
xx.sml:141.12-142.41 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         unit -> bool
  in expression:
    aux (fn () => <exp> <exp> = ".")
xx.sml:144.6-144.61 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string vector vector ref
  operand:         bool
  in expression:
    (double_foldli newLoc_do_not_collide_f) true

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:134.20 Error: syntax error: inserting  WILD
xx.sml:141.20 Error: syntax error: inserting  WILD

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:141.12-142.41 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         string vector vector ref
  in expression:
    (aux (fn () => <exp> = <exp>)) acc
xx.sml:144.6-144.61 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string vector vector ref
  operand:         bool
  in expression:
    (double_foldli newLoc_do_not_collide_f) true

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:141.12-142.43 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         string vector vector ref
  in expression:
    (aux (fn () => <exp> = <exp>)) acc
xx.sml:144.6-144.61 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string vector vector ref
  operand:         bool
  in expression:
    (double_foldli newLoc_do_not_collide_f) true

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:180.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
datatype direction = Down | Left | Right
val move = fn : direction -> int * int
val print_mixed = fn : unit -> unit
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:180.36 Warning: calling polyEqual

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:180.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
datatype direction = Down | Left | Right
val move = fn : direction -> int * int
val print_mixed = fn : unit -> unit
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- main("",[""]);
c
T
P
. . . . M . . . . . 
. . . M M M . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
<
P
. . . . M . . . . . 
. . . M M M . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
q

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:147.7-147.33 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string
  operand:         bool
  in expression:
    print (newLoc_is_valid ())

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
[autoloading]
[autoloading done]
xx.sml:146.6-147.83 Error: operand of andalso is not of type bool [tycon mismatch]
  operand: unit
  in expression:
    (newLoc_is_valid (); print (Bool.toString (newLoc_is_valid <exp>)))
    andalso (newLoc_do_not_collide ())

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:296.17-296.20
- use "xx.sml";
[opening xx.sml]
xx.sml:180.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
datatype direction = Down | Left | Right
val move = fn : direction -> int * int
val print_mixed = fn : unit -> unit
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- use "xx.sml";
[opening xx.sml]
xx.sml:180.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
datatype direction = Down | Left | Right
val move = fn : direction -> int * int
val print_mixed = fn : unit -> unit
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- main("",[""]);
c
T
<
P
. . . . M . . . . . 
. . . M M M . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
<
<
q

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:183.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
datatype direction = Down | Left | Right
val move = fn : direction -> int * int
val print_mixed = fn : unit -> unit
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- main ("",[""]);
c
T
<
trueP
. . . . M . . . . . 
. . . M M M . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
q

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:183.36 Warning: calling polyEqual
val x_dim = 22 : int
val y_dim = 10 : int
val empty_row = #[".",".",".",".",".",".",".",".",".","."] : string vector
val empty_arr = <hidden-value> : string vector vector
val arr =
  ref
    #[#[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],
     #[".",".",".",".",".",".",".",".",".","."],...]
  : string vector vector ref
val score = ref 0 : int ref
val lines = ref 0 : int ref
val chg = fn : string list -> string vector vector
val cur_tetra = ref #[#[]] : string vector vector ref
val cur_tetra_loc = ref (0,0) : (int * int) ref
val tetra =
  [(#"I",
    #[#[".",".",".","."],#["c","c","c","c"],#[".",".",".","."],
     #[".",".",".","."]],(0,3)),(#"O",#[#["y","y"],#["y","y"]],(0,4)),
   (#"Z",#[#["r","r","."],#[".","r","r"],#[".",".","."]],(0,3)),
   (#"S",#[#[".","g","g"],#["g","g","."],#[".",".","."]],(0,3)),
   (#"J",#[#["b",".","."],#["b","b","b"],#[".",".","."]],(0,3)),
   (#"L",#[#[".",".","o"],#["o","o","o"],#[".",".","."]],(0,3)),
   (#"T",#[#[".","m","."],#["m","m","m"],#[".",".","."]],(0,3))]
  : (char * string vector vector * (int * int)) list
val sub = fn : 'a vector vector -> int -> int -> 'a
val update = fn : 'a vector vector -> int -> int -> 'a -> 'a vector vector
val print_arr = fn : string vector vector -> unit
val ask_given = fn : unit -> unit
val empty_arr = fn : unit -> unit
val line_is_full = fn : string vector -> bool
val clear_line = fn : unit -> unit
val print_score = fn : unit -> unit
val print_lines = fn : unit -> unit
val double_foldli = fn
  : (int * int * 'a * 'b -> 'b) -> 'b -> 'a vector vector -> 'b
val rotate_arr = fn : 'a vector vector -> 'a vector vector
val place_block_in_arr = fn
  : string vector vector -> int * int -> string vector vector
datatype direction = Down | Left | Right
val move = fn : direction -> unit
val print_mixed = fn : unit -> unit
val launch_cmd = fn : char list -> Word32.word
val check_tetra_gen = fn : char list -> Word32.word
val ask_for_input = fn : unit -> Word32.word
val main = fn : string * string list -> Word32.word
val it = () : unit
- main("",[""]);
c
T
P
. . . . M . . . . . 
. . . M M M . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
<
trueP
. . . M . . . . . . 
. . M M M . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
. . . . . . . . . . 
q

Process sml finished
Standard ML of New Jersey v110.76 [built: Sun Jul 14 09:59:19 2013]
- use "xx.sml";
[opening xx.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
xx.sml:183.36 Warning: calling polyEqual

Process sml finished
